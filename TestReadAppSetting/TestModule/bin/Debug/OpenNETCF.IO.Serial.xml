<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF.IO.Serial</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.EnumEx">
            <summary>
            Provides helper functions for Enumerations.
            </summary>
            <remarks>Extends the <see cref="T:System.Enum">System.Enum Class</see>.</remarks>
            <seealso cref="T:System.Enum">System.Enum Class</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns> A string containing the name of the enumerated constant in enumType whose value is value, or null if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"> enumType is not an System.Enum.  -or-  value is neither of type enumType nor does it have the same underlying type as enumType.</exception>
            <example>The following code sample illustrates the use of GetName (Based on the example provided with desktop .NET Framework):
            <code>[Visual Basic] 
            Imports System
            
            	Public Class GetNameTest
            
            		Enum Colors
            			Red
            			Green
            			Blue
            			Yellow
            		End Enum 'Colors
            
            		Enum Styles
            			Plaid
            			Striped
            			Tartan
            			Corduroy
            		End Enum 'Styles
            
            	Public Shared Sub Main() 
            		MessageBox.Show("The 4th value of the Colors Enum is " + [OpenNETCF.Enum].GetName(GetType(Colors), 3))
            		MessageBox.Show("The 4th value of the Styles Enum is " + [OpenNETCF.Enum].GetName(GetType(Styles), 3))
            	End Sub 'Main
            	
            End Class 'GetNameTest</code>
            <code>[C#] 
            using System;
            
            public class GetNameTest 
            {
            	enum Colors { Red, Green, Blue, Yellow };
            	enum Styles { Plaid, Striped, Tartan, Corduroy };
            
            	public static void Main() 
            	{
            		MessageBox.Show("The 4th value of the Colors Enum is " + OpenNETCF.Enum.GetName(typeof(Colors), 3));
            		MessageBox.Show("The 4th value of the Styles Enum is " + OpenNETCF.Enum.GetName(typeof(Styles), 3));
            	}
            }</code>
            </example>
            <seealso cref="M:System.Enum.GetName(System.Type,System.Object)">System.Enum.GetName Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>A string array of the names of the constants in enumType. The elements of the array are sorted by the values of the enumerated constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <example>The follow example shows how to enumerate the members of the System.DayOfWeek enumeration by adding them to a ComboBox:-
            <code>[Visual Basic]
            Dim thisDOW As New DayOfWeek
            For Each thisDOW In OpenNETCF.Enum.GetValues(Type.GetType("System.DayOfWeek"))
            	ComboBox1.Items.Add(thisDOW)
            Next</code>
            <code>[C#]
            foreach(DayOfWeek thisdow in OpenNETCF.Enum.GetValues(typeof(DayOfWeek)))
            {
            	comboBox1.Items.Add(thisdow);
            }</code></example>
            <seealso cref="M:System.Enum.GetNames(System.Type)">System.Enum.GetNames Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of the specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>The underlying <see cref="T:System.Type"/> of <paramref>enumType</paramref>.</returns>
            <seealso cref="M:System.Enum.GetUnderlyingType(System.Type)">System.Enum.GetUnderlyingType Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An System.Array of the values of the constants in enumType. The elements of the array are sorted by the values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <seealso cref="M:System.Enum.GetValues(System.Type)">System.Enum.GetValues Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.IsDefined(System.Type,System.Object)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value or name of a constant in enumType.</param>
            <returns><b>true</b> if a constant in <paramref>enumType</paramref> has a value equal to value; otherwise, <b>false</b>.</returns>
            <seealso cref="M:System.Enum.IsDefined(System.Type,System.Object)">System.Enum.IsDefined Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:OpenNETCF.EnumEx.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException">enumType is not an <see cref="T:System.Enum"/>.
             -or-  value is either an empty string ("") or only contains white space.
             -or-  value is a name, but not one of the named constants defined for the enumeration.</exception>
             <seealso cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">System.Enum.Parse Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.ToObject(System.Type,System.Object)">
            <summary>
            Returns an instance of the specified enumeration set to the specified value.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration.</param>
            <param name="value">The value.</param>
            <returns>An enumeration object whose value is <paramref>value</paramref>.</returns>
            <seealso cref="M:System.Enum.ToObject(System.Type,System.Object)">System.Enum.ToObject Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.Format(System.Type,System.Object,System.String)">
            <summary>
            Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format. 
            </summary>
            <remarks>
            The valid format values are: 
            "G" or "g" - If value is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of value is returned.
            For example, suppose the only enumerated constant is named, Red, and its value is 1. If value is specified as 1, then this format returns "Red". However, if value is specified as 2, this format returns "2".
            "X" or "x" - Represents value in hexadecimal without a leading "0x". 
            "D" or "d" - Represents value in decimal form.
            "F" or "f" - Behaves identically to "G" or "g", except the FlagsAttribute is not required to be present on the Enum declaration. 
            "V" or "v" - If value is equal to a named enumerated constant, the value of that constant is returned; otherwise, the decimal equivalent of value is returned.
            </remarks>
            <param name="enumType">The enumeration type of the value to convert.</param>
            <param name="value">The value to convert.</param>
            <param name="format">The output format to use.</param>
            <returns>A string representation of value.</returns>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommPortException">
            <summary>
            Exceptions throw by the OpenNETCF.IO.Serial class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.CommPortException.#ctor(System.String)">
            <summary>
            Default CommPortException
            </summary>
            <param name="desc"></param>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port">
            <summary>
            A class wrapper for serial port communications
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Port.Capabilities">
            <summary>
            stores port's capabilities - capabilities can only be retreived not set
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String)">
            <summary>
            Create a serial port class.  The port will be created with defualt settings.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.BasicPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.DetailedPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.BasicPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.DetailedPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Dispose">
            <summary>
            Dispose the object's resources
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Finalize">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Open">
            <summary>
            Open the current port
            </summary>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Query">
            <summary>
            Query the current port's capabilities without accessing it. You can only call the Close()
            method after reading the capabilities. This method does neither initialize nor Open() the
            port.
            </summary>
            
            <example>
            
            </example>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.UpdateSettings">
            <summary>
            Updates communication settings of the port
            </summary>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Close">
            <summary>
            Close the current serial port
            </summary>
            <returns>true indicates success, false indicated failure</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.DiscardInputBuffer">
            <summary>
            clears the input buffer
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.GetPortProperties">
            <summary>
            <code>GetPortProperties initializes the commprop member of the port object</code>
            </summary>
            <returns></returns>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.OnError">
            <summary>
             A communication error has occurred
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.DataReceived">
            <summary>
            Serial data has been received
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.TxDone">
            <summary>
            Transmit complete
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.FlagCharReceived">
            <summary>
            Set flag character was in the receive stream
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.PowerEvent">
            <summary>
            Power change event has occurred
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.HighWater">
            <summary>
            Serial buffer's high-water level has been exceeded
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.DSRChange">
            <summary>
            DSR state has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.RingChange">
            <summary>
            Ring signal has been detected
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.CTSChange">
            <summary>
            CTS state has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.RLSDChange">
            <summary>
            RLSD state has changed
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.PortName">
            <summary>
            The name of the Port (i.e. "COM1:")
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.IsOpen">
            <summary>
            Returns whether or not the port is currently open
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Output">
            <summary>
            The Port's output buffer.  Set this property to send data.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Input">
            <summary>
            The Port's input buffer.  Incoming data is read from here and a read will pull InputLen bytes from the buffer
            <seealso cref="P:OpenNETCF.IO.Serial.Port.InputLen"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.InputLen">
            <summary>
            The length of the input buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.InBufferCount">
            <summary>
            The actual amount of data in the input buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.OutBufferCount">
            <summary>
            The actual amount of data in the output buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RThreshold">
            <summary>
            The number of bytes that the receive buffer must exceed to trigger a Receive event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.SThreshold">
            <summary>
            The number of bytes that the transmit buffer must exceed to trigger a Transmit event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Break">
            <summary>
            Send or check for a communications BREAK event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DTRAvailable">
            <summary>
            Returns whether or not the current port support a DTR signal
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DTREnable">
            <summary>
            Gets or sets the current DTR line state (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RTSAvailable">
            <summary>
            Returns whether or not the current port support an RTS signal
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RTSEnable">
            <summary>
            Gets or sets the current RTS line state (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.IREnable">
            <summary>
            Gets or sets the com port for IR use (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DetailedSettings">
            <summary>
            Get or Set the Port's DetailedPortSettings
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Settings">
            <summary>
            Get or Set the Port's BasicPortSettings
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommEvent">
            <summary>
            Raised on all enabled communication events
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommChangeEvent">
            <summary>
            Raised when the communication state changes
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommErrorEvent">
            <summary>
            Raised during any communication error
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommEventFlags">
            <summary>
            Event Flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.NONE">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RXCHAR">
            <summary>
            Event on receive
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RXFLAG">
            <summary>
            Event when specific character is received
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.TXEMPTY">
            <summary>
            Event when the transmit buffer is empty
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.CTS">
            <summary>
            Event on CTS state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.DSR">
            <summary>
            Event on DSR state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RLSD">
            <summary>
            Event on RLSD state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.BREAK">
            <summary>
            Event on BREAK
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ERR">
            <summary>
            Event on line error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RING">
            <summary>
            Event on ring detect
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.PERR">
            <summary>
            Event on printer error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RX80FULL">
            <summary>
            Event on 80% high-water
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.EVENT1">
            <summary>
            Provider event 1
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.EVENT2">
            <summary>
            Provider event 2
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.POWER">
            <summary>
            Event on CE power notification
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ALLCE">
            <summary>
            Mask for all flags under CE
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ALLPC">
            <summary>
            Mask for all flags under desktop Windows
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommErrorFlags">
            <summary>
            Error flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.RXOVER">
            <summary>
            Receive overrun
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.OVERRUN">
            <summary>
            Overrun
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.RXPARITY">
            <summary>
            Parity error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.FRAME">
            <summary>
            Frame error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.BREAK">
            <summary>
            BREAK received
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.TXFULL">
            <summary>
            Transmit buffer full
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.IOE">
            <summary>
            IO Error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.MODE">
            <summary>
            Requested mode not supported
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommModemStatusFlags">
            <summary>
            Modem status flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_CTS_ON">
            <summary>
            The CTS (Clear To Send) signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_DSR_ON">
            <summary>
            The DSR (Data Set Ready) signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_RING_ON">
            <summary>
            The ring indicator signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_RLSD_ON">
            <summary>
            The RLSD (Receive Line Signal Detect) signal is on.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommEscapes">
            <summary>
            Communication escapes
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETXOFF">
            <summary>
            Causes transmission to act as if an XOFF character has been received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETXON">
            <summary>
            Causes transmission to act as if an XON character has been received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETRTS">
            <summary>
            Sends the RTS (Request To Send) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRRTS">
            <summary>
            Clears the RTS (Request To Send) signal
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETDTR">
            <summary>
            Sends the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRDTR">
            <summary>
            Clears the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETBREAK">
            <summary>
            Suspends character transmission and places the transmission line in a break state until the ClearCommBreak function is called (or EscapeCommFunction is called with the CLRBREAK extended function code). The SETBREAK extended function code is identical to the SetCommBreak function. This extended function does not flush data that has not been transmitted.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRBREAK">
            <summary>
            Restores character transmission and places the transmission line in a nonbreak state. The CLRBREAK extended function code is identical to the ClearCommBreak function
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETIR">
            Set the port to IR mode.
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRIR">
            <summary>
            Set the port to non-IR mode.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.APIErrors">
            <summary>
            Error values from serial API calls
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_FILE_NOT_FOUND">
            <summary>
            Port not found
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_INVALID_NAME">
            <summary>
            Invalid port name
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_ACCESS_DENIED">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_INVALID_HANDLE">
            <summary>
            invalid handle
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_IO_PENDING">
            <summary>
            IO pending
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommAPI.ERROR_IO_PENDING">
            <summary>
            Overlapped I/O operation is in progress.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.ASCII">
            <summary>
            Common ASCII Control Codes
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.NULL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SOH">
            <summary>
            Start of Heading
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.STX">
            <summary>
            Start of Text
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ETX">
            <summary>
            End of Text
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.EOT">
            <summary>
            End of Transmission
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ENQ">
            <summary>
            Enquiry
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ACK">
            <summary>
            Acknowledge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.BELL">
            <summary>
            Bell
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.BS">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.HT">
            <summary>
            Horizontal tab
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.LF">
            <summary>
            Line Feed
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.VT">
            <summary>
            Vertical tab
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.FF">
            <summary>
            Form Feed
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.CR">
            <summary>
            Carriage Return
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SO">
            <summary>
            Shift out
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SI">
            <summary>
            Shift in
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC1">
            <summary>
            Device Control 1
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC2">
            <summary>
            Device Control 2
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC3">
            <summary>
            Device Control 3
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC4">
            <summary>
            Device Control 4
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.NAK">
            <summary>
            No Acknowledge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SYN">
            <summary>
            Synchronization
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ETB">
            <summary>
            End of Transmission Block
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.CAN">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.EM">
            <summary>
            End of Medium
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SUB">
            <summary>
            Substitute Character
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ESC">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.FS">
            <summary>
            Field Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.GS">
            <summary>
            Group Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.RS">
            <summary>
            Record Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.US">
            <summary>
            Unit Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SP">
            <summary>
            Spare
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DEL">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Handshake">
            <summary>
            Common serial handshaking protocols
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.none">
            <summary>
            No handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.XonXoff">
            <summary>
            XOn/XOff handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.CtsRts">
            <summary>
            CTS/RTS
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.DsrDtr">
            <summary>
            DSR/DTR
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Parity">
            <summary>
            Parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.none">
            <summary>
            No parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.odd">
            <summary>
            Odd parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.even">
            <summary>
            Even parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.mark">
            <summary>
            Mark parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.space">
            <summary>
            Space parity
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.StopBits">
            <summary>
            Stop bits
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.one">
            <summary>
            One stop bit
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.onePointFive">
            <summary>
            1.5 stop bits
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.two">
            <summary>
            Two stop bits
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.DTRControlFlows">
            <summary>
            DTR Flow Control
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.RTSControlFlows">
            <summary>
            RTS Flow Control
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.toggle">
            <summary>
            Toggle
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BaudRates">
            <summary>
            CE-supported baud rates (check your hardware for actual availability)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_110">
            <summary>
            110bpb
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_300">
            <summary>
            300bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_600">
            <summary>
            600bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_1200">
            <summary>
            1200bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_2400">
            <summary>
            2400bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_4800">
            <summary>
            4800bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_9600">
            <summary>
            9600bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_14400">
            <summary>
            14.4kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_19200">
            <summary>
            19.2kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_38400">
            <summary>
            38.4kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_56000">
            <summary>
            56kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_57600">
            <summary>
            57.6kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_115200">
            <summary>
            115kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_128000">
            <summary>
            128kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_230400">
            <summary>
            225kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_256000">
            <summary>
            256kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_460800">
            <summary>
            450kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_921600">
            <summary>
            900kbps
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BasicPortSettings">
            <summary>
            Used for manipulating several basic Port settings of a Port class
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.BaudRate">
            <summary>
            Baud rate (default = 19200bps)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.ByteSize">
            <summary>
            Byte Size of data (default = 8)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.Parity">
            <summary>
            Data Parity (default = none)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.StopBits">
            <summary>
            Number of stop bits (default = 1)
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.DetailedPortSettings">
            <summary>
            Used for manipulating all settings of a Port class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.DetailedPortSettings.#ctor">
            <summary>
            Create a DetailedPortSettings class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.DetailedPortSettings.Init">
            <summary>
            These are the default port settings
            override Init() to create new defaults (i.e. common handshaking)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.BasicSettings">
            <summary>
            Basic port settings
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutCTS">
            <summary>
            Specifies if the CTS (clear-to-send) signal is monitored for output flow control. If this member is TRUE and CTS is turned off, output is suspended until CTS is sent again.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutDSR">
            <summary>
            Specifies if the DSR (data-set-ready) signal is monitored for output flow control. If this member is TRUE and DSR is turned off, output is suspended until DSR is sent again. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DTRControl">
            <summary>
            Specifies the DTR (data-terminal-ready) flow control.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DSRSensitive">
            <summary>
            Specifies if the communications driver is sensitive to the state of the DSR signal. If this member is TRUE, the driver ignores any bytes received, unless the DSR modem input line is high.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.TxContinueOnXOff">
            <summary>
            Specifies if transmission stops when the input buffer is full and the driver has transmitted the XoffChar character. If this member is TRUE, transmission continues after the input buffer has come within XoffLim bytes of being full and the driver has transmitted the XoffChar character to stop receiving bytes. If this member is FALSE, transmission does not continue until the input buffer is within XonLim bytes of being empty and the driver has transmitted the XonChar character to resume reception.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutX">
            <summary>
            Specifies if XON/XOFF flow control is used during transmission. If this member is TRUE, transmission stops when the XoffChar character is received and starts again when the XonChar character is received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.InX">
            <summary>
            Specifies if XON/XOFF flow control is used during reception. If this member is TRUE, the XoffChar character is sent when the input buffer comes within XoffLim bytes of being full, and the XonChar character is sent when the input buffer comes within XonLim bytes of being empty
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.ReplaceErrorChar">
            <summary>
            Specifies if bytes received with parity errors are replaced with the character specified by the ErrorChar member. If this member is TRUE and the fParity member is TRUE, replacement occurs.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.RTSControl">
            <summary>
            Specifies the RTS (request-to-send) flow control. If this value is zero, the default is RTS_CONTROL_HANDSHAKE. The following table shows possible values for this member.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DiscardNulls">
            <summary>
            Specifies if null bytes are discarded. If this member is TRUE, null bytes are discarded when received. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.AbortOnError">
            <summary>
            Specifies if read and write operations are terminated if an error occurs. If this member is TRUE, the driver terminates all read and write operations with an error status if an error occurs. The driver will not accept any further communications operations until the application has acknowledged the error by calling the ClearError function.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.XonChar">
            <summary>
            Specifies the value of the XON character for both transmission and reception
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.XoffChar">
            <summary>
            Specifies the value of the XOFF character for both transmission and reception.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.ErrorChar">
            <summary>
            Specifies the value of the character used to replace bytes received with a parity error.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.EOFChar">
            <summary>
            Specifies the value of the character used to signal the end of data. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.EVTChar">
            <summary>
            Specifies the value of the character used to signal an event.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeNone">
            <summary>
            A common implementation of DetailedPortSettings for non handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeNone.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeXonXoff">
            <summary>
            A common implementation of DetailedPortSettings for XON/XOFF handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeXonXoff.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeCtsRts">
            <summary>
            A common implementation of DetailedPortSettings for CTS/RTS handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeCtsRts.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeDsrDtr">
            <summary>
            A common implementation of DetailedPortSettings for DSR/DTR handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeDsrDtr.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.SEP">
            <summary>
            SEP enumerates known serial provider types. Currently SERIALCOMM is the only 
            provider in this enumeration.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.SEP.SEP_SERIALCOMM">
            <summary>
            SERIALCOMM is the only service provider supported by serial APIs.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.PST">
            <summary>
            PST enumerates the provider subtypes supported by the WIN32 serial APIs. PST indicates which
            Port is used for serial communication. Ports can either be physical or logical devices.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_UNSPECIFIED">
            <summary>
            no provider subtype specified
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS232">
            <summary>
            RS232 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_PARALLELPORT">
            <summary>
            parallel port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS422">
            <summary>
            RS422 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS423">
            <summary>
            RS423 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS449">
            <summary>
            RS449 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_MODEM">
            <summary>
            Modem
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_FAX">
            <summary>
            Fax
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_SCANNER">
            <summary>
            Scanner
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_NETWORK_BRIDGE">
            <summary>
            unspecified network bridge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_LAT">
            <summary>
            DEC's LAT Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_TCPIP_TELNET">
            <summary>
            Telnet connection
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_X25">
            <summary>
            X.25 standard
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.PCF">
            <summary>
            PCF enumerates the provider capabilites supported by the specified COMx: Port. This enumeration
            is used internaly only. Access to this bitfield information is provided through attributes of the
            CommProp class.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.SP">
            <summary>
            SP 
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BAUD">
            <summary>
            baud rates settable by Comm API 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_075">
            <summary>
            75 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_110">
            <summary>
            110 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_134_5">
            <summary>
            134.5 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_150">
            <summary>
            150 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_300">
            <summary>
            300 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_600">
            <summary>
            600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_1200">
            <summary>
            1,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_1800">
            <summary>
            1,800 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_2400">
            <summary>
            2,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_4800">
            <summary>
            4,800 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_7200">
            <summary>
            7,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_9600">
            <summary>
            9,600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_14400">
            <summary>
            14,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_19200">
            <summary>
            19,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_38400">
            <summary>
            38,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_56K">
            <summary>
            56 Kbits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_128K">
            <summary>
            129 Kbits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_115200">
            <summary>
            115,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_57600">
            <summary>
            57,600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_USER">
            <summary>
            User defined bitrates
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommCapabilities">
            <summary>
            Container for all available information on port's capabilties 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwServiceMask">
            <summary>
            Indicates which services are supported by the port. SP_SERIALCOMM is specified for communication
            providers, including modem providers.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxTxQueue">
            <summary>
            Specifies the maximum size, in bytes, of the driver's internal output buffer. A value of zero
            indicates that no maximum value is imposed by the driver.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxRxQueue">
            <summary>
            Specifies the maximum size, in bytes, of the driver's internal input buffer. A value of zero
            indicates that no maximum value is imposed by the driver.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxBaud">
            <summary>
            Specifies the maximum baud rate, in bits per second (bps).
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwProvSubType">
            <summary>
            Specifies the communication provider type.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwCurrentTxQueue">
            <summary>
            Specifies the size, in bytes, of the driver's internal output buffer. A value of zero indicates 
            that the value is unavailable.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwCurrentRxQueue">
            <summary>
            Specifies the size, in bytes, of the driver's internal input buffer. A value of zero indicates 
            that the value is unavailable.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16BitMode">
            <summary>
            Port supports special 16-bit mode
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsDtrDts">
            <summary>
            Port supports DTR (Data Terminal ready) and DSR (Data Set Ready) flow control
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsIntTimeouts">
            <summary>
            Port supports interval timeouts
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityCheck">
            <summary>
            Port supports parity checking
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsRlsd">
            <summary>
            Port supports RLSD (Receive Line Signal Detect)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsRtsCts">
            <summary>
            Port supports RTS (Request To Send) and CTS (Clear To Send) flowcontrol
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsSetXChar">
            <summary>
            Port supports user definded characters for XON and XOFF
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsSpecialChars">
            <summary>
            Port supports special characters
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsTotalTimeouts">
            <summary>
            Port supports total and elapsed time-outs
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsXonXoff">
            <summary>
            Port supports XON/XOFF flow control
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableBaud">
            <summary>
            Baud rate can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableDataBits">
            <summary>
            Number of data bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableHandShaking">
            <summary>
            Handshake protocol can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableParity">
            <summary>
            Number of parity bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableParityCheck">
            <summary>
            Parity check can be enabled/disabled
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableRlsd">
            <summary>
            Receive Line Signal detect can be enabled/disabled
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableStopBits">
            <summary>
            Number of stop bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports5DataBits">
            <summary>
            Port supports 5 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports6DataBits">
            <summary>
            Port supports 6 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports7DataBits">
            <summary>
            Port supports 7 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports8DataBits">
            <summary>
            Port supports 8 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16DataBits">
            <summary>
            Port supports 16 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16XDataBits">
            <summary>
            Port supports special wide data path through serial hardware lines
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityEven">
            <summary>
            Port supports even parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityMark">
            <summary>
            Port supports mark parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityNone">
            <summary>
            Port supports none parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityOdd">
            <summary>
            Port supports odd parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParitySpace">
            <summary>
            Port supports space parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits10">
            <summary>
            Port supports 1 stop bit
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits15">
            <summary>
            Port supports 1.5 stop bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits20">
            <summary>
            Port supports 2 stop bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud75">
            <summary>
            Port can be set to 75 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud110">
            <summary>
            Port can be set to 110 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud134_5">
            <summary>
            Port can be set to 134.5 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud150">
            <summary>
            Port can be set to 150 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud300">
            <summary>
            Port can be set to 300 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud600">
            <summary>
            Port can be set to 600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud1200">
            <summary>
            Port can be set to 1,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud2400">
            <summary>
            Port can be set to 2,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud4800">
            <summary>
            Port can be set to 4,800 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud7200">
            <summary>
            Port can be set to 7,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud9600">
            <summary>
            Port can be set to 9,600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud14400">
            <summary>
            Port can be set to 14,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud19200">
            <summary>
            Port can be set to 19,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud38400">
            <summary>
            Port can be set to 38,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud56K">
            <summary>
            Port can be set to 56 Kbits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud128K">
            <summary>
            Port can be set to 128 Kbits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud115200">
            <summary>
            Port can be set to 115,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud57600">
            <summary>
            Port can be set to 57,600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaudUser">
            <summary>
            Port can be set to user defined bit rate
            </summary>
        </member>
    </members>
</doc>
